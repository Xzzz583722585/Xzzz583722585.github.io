<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DDD-001-对一个未完成项目的总结</title>
    <link href="/Xzzz58372585.github.io/2021/08/19/DDD-001-%E5%AF%B9%E4%B8%80%E4%B8%AA%E6%9C%AA%E5%AE%8C%E6%88%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <url>/Xzzz58372585.github.io/2021/08/19/DDD-001-%E5%AF%B9%E4%B8%80%E4%B8%AA%E6%9C%AA%E5%AE%8C%E6%88%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="DDD-001-对一个未完成项目的总结"><a href="#DDD-001-对一个未完成项目的总结" class="headerlink" title="DDD-001-对一个未完成项目的总结"></a>DDD-001-对一个未完成项目的总结</h1><h2 id="ZXJY公司技术架构所面临的问题"><a href="#ZXJY公司技术架构所面临的问题" class="headerlink" title="ZXJY公司技术架构所面临的问题"></a>ZXJY公司技术架构所面临的问题</h2><p><strong>核心问题：微服务数量过多</strong>（充分说明了互联网公司与国企文化的不同，尤其当公司年轻人居多时，其大胆敢干的气质冲突凸显了出来）。</p><p>ZXJY从2015年开始全面使用微服务架构后，服务的数量就开始飞涨。某些研发组甚至发展到了，一个业务功能一个微服务的程度（往往是按照数据库表来划分的）。在一开始感受到微服务带来的分工和模块化的优点之后，团队很快就碰到如何管理数量庞大的微服务的棘手问题–系统复杂程度指数级上升。</p><ul><li><p>理解困难</p><ul><li>新人对业务与代码的映射、架构、代码细节、技术实现理解困难</li></ul></li><li><p>开发困难</p><ul><li>新功能放在哪个微服务更合适，难以判断（或者说都可以）</li><li>抽象泄漏。微服务作为SOA的一种类型，其初衷就是希望能够通过对外部提供一个合理抽象的接口，从而屏蔽内部的实现。只要接口定义不变，内部可以独立迭代，从而实现开发流程的扩展性。然而我们很难保证服务拆分和接口设计是合理的，尤其在业务快速迭代的过程中，整个系统的各种基础假设都会被持续迭代。然而一旦某个逻辑被暴露为微服务接口，其抽象就泄露到了整个系统，后续要修改或者下线这个接口的成本是极高的。这就导致了后续即使业务逻辑发生变化，我们也只能捏着鼻子在沿着错误的抽象来修修补补。</li></ul></li><li><p>部署困难</p><ul><li>一个功能的上线可能涉及到多个微服务，那么怎么打包、上线顺序等等都是问题，当团队开发节奏加快后，频繁的部署使研发、运维人员苦不堪言。由于之前微服务数量过多以及拆分不合理，导致很多简单的修改都需要同时更新多个微服务，不但使得工作量大大增加，也使得部署的依赖更加复杂。</li><li>DevOps、敏捷等技术的运用遭受挑战</li></ul></li><li><p>测试困难</p><ul><li>本地代码调试困难</li><li>Bug溯源、定位、追踪复杂</li></ul></li><li><p>维护困难</p><ul><li>网络波动对服务性能影响巨大</li><li>对基础设施迭代不友好。数量庞大的微服务大大拖慢了基础设施迭代和推广的速度，又进一步使得微服务无法得到有效支撑。一个惨痛的现实就是，每次有紧急的基础设施升级，我们都必须手动升级斑马300+的微服务，带来了巨大的人力浪费。</li></ul></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><strong>核心思路：降低微服务数量</strong>（好似说了一句白话）。</p><p><strong>核心方案：区分“项目”和“服务”。一个项目对应一个代码仓库（git repo），规模可以适当大一些，应当包含一个领域内的大部分逻辑。一个服务对应一个运行时，可以是项目中的一个module或者是一个单独的entrypoint。基础架构的部署系统提供了便于部署项目的能力，即项目中的代码修改之后，可以自动部署所有关联的服务。</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GO!GO!GO!</title>
    <link href="/Xzzz58372585.github.io/2021/08/19/GO-GO-GO/"/>
    <url>/Xzzz58372585.github.io/2021/08/19/GO-GO-GO/</url>
    
    <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>本文是我个人博客的起点，故多说点废话。</p><p>首先说点最近的个人经历吧，有关于我对目前想要探讨的问题在时间上有个脉络。</p><ul><li>我是在研究生一年级入学前开始学习大数据相关知识，如基本思潮、hdoop、spark等，当时在没有实践基础的情况下，主要的学习内容是相关工具/框架的搭建、编码使用以及技术细节。</li><li>在研究生一年级学习中，又系统地学习了大数据相关更多的知识，如Hive、Hbas、Spark &amp; Spark Streaming、Zookeeper等等，所学内容与之前无异。</li><li>与此同时，由于本人导师的原因，又接触到了许多工程/软件工程/敏捷相关的思想课程，如《精益创业》、看板、Scrum、极限编程等（有愧的是一直没有深入系统的去看过DevOps相关书籍，只是泛泛地看过大佬们的博客，就不当作学习吧）。</li><li>再之后，即2019年上半年在上海的某家公司实习时，由于所处项目正在微服务化改造，故又去系统学习了微服务，主要书籍有《微服务架构设计模式》、《微服务设计》、《Spring 微服务实战》、Martin Flower等大佬们的各种博客，有了微服务，就总有一个绕不过去的坎–如何拆分为服务？之前的这些文章中，都或多或少的讲解过这个问题，也或明或暗的牵扯到了DDD、六边形架构、整洁架构等概念。</li><li>我实习所处的产品组，做的事简单说就是「AI模型部署」，这个过程中涉及到的知识有云计算相关（k8s、网关、灰度/蓝绿/金丝雀部署、集群监控、集群报警）、DevOps相关。</li><li>后续回到学校，又去研究了分布式相关的概念和知识，这里要重重的推荐一本书–《数据密集型应用系统设计》。</li><li>研究生毕业后，我去某国企参加了他们电商项目的微服务化改造项目，与之前的实习相比，这次我去的早，真正的从0到1体验到了到了这个过程。</li><li>工作一年不到，因为一些个人原因，跳槽到了一家互联网企业。在这里，除了日常的业务工作，我们开始了对之前微服务项目的整合（这个后续会细说，又是一个电商迁移项目，但整个公司所面对的问题简单说就是微服务一开始拆的太细了），项目结构是面向DDD的，整个开发过程中的设计策略也是DDD的那一套，我们按下不表。</li></ul><p>说了这么多细枝末节，连云计算和大数据都扯出来了，我这是要干嘛？其实我一直有一种糊涂的感觉，就是我觉得我刚才所说的这些知识，它们是有深刻联系的，在思想上、在技术上都有，我想要理清这个脉络，所以我需要按照一些方式去梳理他。所以我开启了我的博客行，旨在解决个人问题……^_^</p><p>什么联系？</p><p>细节不说，我所学习的大数据知识告诉我最重要的思想是「分而治之」，除此以外，我在学习大数据相关框架/工具的技术细节时，与之后学习分布式相关的知识不谋而合，或者说，大数据相关工具就是对这些分布式理论知识的实践（所以学习分布式时接受的也特别快～）。在微服务的整个学习过程中，分布式的影子无处不。，在思想层面，「分而治之」依旧影响着一切。至于底层的实现细节，微服务与分布式所面对的问题，也有了联系上。还是那个问题，如何拆分微服务？又引出了DDD、六边形架构等等，那么去看这些概念，「分而治之」再一次在另一个维度闪耀。</p><p>这或许就是我目前所能写出的联系吧，但我觉得不止于此处，故现在开始我的学习之旅，在未来的一段时间，我想要探究以下问题。</p><ul><li>微服务、DDD、六边形等架构、DevOps、分布式之间的关系</li><li>这些技术的历史发展</li><li>这些技术的细节探究</li><li>相关架构的研讨</li></ul><p>内容很多，路也很长，我一步一步走，就今年而言，重点放在以下两个系列。</p><ul><li>DDD 理论/实践总结</li><li>以时间轴为视角，总结各架构核心理念（灵感来源）</li></ul><p>那，就开始吧。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
